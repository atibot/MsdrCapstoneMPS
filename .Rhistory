setkey(data, DATE)
## Pull test set of 5 years
eq_subset <- data[DATE >= "2005-01-01" & DATE <= "2010-12-31"]
## Subset to 5 countries
top_countries <- eq_subset[,.N,by = COUNTRY][order(-N)][1:5, COUNTRY]
eq_subset <- eq_subset[COUNTRY %in% top_countries]
## Set country to factor
eq_subset[, COUNTRY := as.factor(COUNTRY)]
## Set earthquake magnitude to numeric
eq_subset[, EQ_PRIMARY := as.numeric(EQ_PRIMARY)]
source("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R/geom_timeline.R")
source("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R/geom_timeline_labels.R")
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + labs(y = "")
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake()
rm(list = ls())
############################ prepare environment ############################
library(data.table)
library(ggplot2)
library(ggthemes)
library(grid)
## Load data
data <- readRDS(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
## Load cleaning functions
setwd("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R")
for (i in list.files()) source(i)
## Build date variable
data <- eq_clean_data(data)
data <- eq_location_clean(data)
## Set key to date
setkey(data, DATE)
## Pull test set of 5 years
eq_subset <- data[DATE >= "2005-01-01" & DATE <= "2010-12-31"]
## Subset to 5 countries
top_countries <- eq_subset[,.N,by = COUNTRY][order(-N)][1:5, COUNTRY]
eq_subset <- eq_subset[COUNTRY %in% top_countries]
## Set country to factor
eq_subset[, COUNTRY := as.factor(COUNTRY)]
## Set earthquake magnitude to numeric
eq_subset[, EQ_PRIMARY := as.numeric(EQ_PRIMARY)]
source("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R/geom_timeline.R")
source("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R/geom_timeline_labels.R")
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake()
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + labs(y = "")
dev.off()
?hline
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + geom_hline(aes(yintercept = 0.5, color = "lightgray"))
dev.off()
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + geom_hline(aes(yintercept = 0.5))
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + geom_hline(aes(yintercept = 0.5), color = "lightgray")
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + geom_hline(aes(yintercept = 0.5), color = "lightgray") + labs(y = "")
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake()
dev.off()
rm(list = ls())
############################ prepare environment ############################
library(data.table)
library(ggplot2)
library(ggthemes)
library(grid)
## Load data
data <- readRDS(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
## Load cleaning functions
setwd("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R")
for (i in list.files()) source(i)
## Build date variable
data <- eq_clean_data(data)
data <- eq_location_clean(data)
## Set key to date
setkey(data, DATE)
## Pull test set of 5 years
eq_subset <- data[DATE >= "2005-01-01" & DATE <= "2010-12-31"]
## Subset to 5 countries
top_countries <- eq_subset[,.N,by = COUNTRY][order(-N)][1:5, COUNTRY]
eq_subset <- eq_subset[COUNTRY %in% top_countries]
## Set country to factor
eq_subset[, COUNTRY := as.factor(COUNTRY)]
## Set earthquake magnitude to numeric
eq_subset[, EQ_PRIMARY := as.numeric(EQ_PRIMARY)]
source("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R/geom_timeline.R")
source("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R/geom_timeline_labels.R")
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + labs(y = "")
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS, size = EQ_PRIMARY)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake()
dev.off()
quartz()
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY))
g + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS)) + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY)) + theme_earthquake() + labs(y = "")
dev.off()
rm(list = ls())
## Load data
raw_noaa <- readRDS(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
## Build date variable
clean_noaa <- eq_clean_data(raw_noaa)
## Load cleaning functions
setwd("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R")
for (i in list.files()) source(i)
## Build date variable
clean_noaa <- eq_clean_data(raw_noaa)
clean_noaa <- eq_location_clean(clean_noaa)
## Set key to date
setkey(data, DATE)
## Set key to date
setkey(clean_noaa, DATE)
## Pull test set of 5 years
eq_subset <- clean_noaa[DATE >= "2005-01-01" & DATE <= "2010-12-31"]
## Subset to 5 countries
top_countries <- eq_subset[,.N,by = COUNTRY][order(-N)][1:5, COUNTRY]
eq_subset <- eq_subset[COUNTRY %in% top_countries]
## Set country to factor
eq_subset[, COUNTRY := as.factor(COUNTRY)]
## Set earthquake magnitude to numeric
eq_subset[, EQ_PRIMARY := as.numeric(EQ_PRIMARY)]
############################ prepare environment ############################
library(data.table)
library(ggplot2)
library(ggthemes)
library(grid)
library(tidyverse)
library(leaflet)
## Load data
raw_noaa <- readRDS(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
## Load cleaning functions
setwd("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R")
for (i in list.files()) source(i)
## Load cleaning functions
setwd("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R")
for (i in list.files()) source(i)
## Clean data and subset to Mexico
mexico_quakes <- raw_noaa %>%
eq_clean_data() %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000)
eq_map(mexico_quakes, annot_col = "DATE")
## Plot earthquakes in Mexico with date labels in popup windows
raw_noaa %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
## Plot earthquakes in Mexico with date labels in popup windows
raw_noaa %>%
eq_clean_data() %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
rm(list = ls())
############################ prepare environment ############################
library(data.table)
library(ggplot2)
library(ggthemes)
library(grid)
library(tidyverse)
library(leaflet)
## Load data
raw_noaa <- readRDS(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
## Load cleaning functions
setwd("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R")
for (i in list.files()) source(i)
## Plot earthquakes in Mexico with date labels in popup windows
raw_noaa %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
## Plot earthquakes in Mexico with date labels in popup windows
raw_noaa %>%
eq_clean_data() %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
devtools::document()
library(data.table)
noaa_data <- fread("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data-raw/noaa_data.csv")
devtools::use_data(noaa_data)
devtools::use_data(noaa_data, overwrite = TRUE)
devtools::document()
devtools::document()
readRDS(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
load(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
load(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
rm(list = ls())
load(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
head(noaa_data)
test <- load(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
load(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
rm(test)
rm(list = ls())
load(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
rm(list = ls())
############################ prepare environment ############################
library(data.table)
library(ggplot2)
library(ggthemes)
library(grid)
## Load data
load(file = "/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/data/noaa_data.rda")
raw_noaa <- noaa_data
## Load cleaning functions
setwd("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R")
for (i in list.files()) source(i)
devtools::document()
rm(list = ls())
?eq_clean_data
?eq_clean_location
?eq_location_clean
devtools::document()
?eq_location_clean
?eq_clean_data
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::use_vignette("NOAA_earthquake_database")
head(noaa_data)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(data.table)
library(MsdrCapstoneMPS)
clean_noaa <- eq_clean_data(raw_noaa)
raw_noaa <- as.data.table(noaa_data)
tail(raw_noaa)
clean_noaa <- eq_clean_data(raw_noaa)
raw_noaa <- as.data.table(noaa_data)
tail(raw_noaa)
clean_noaa <- eq_clean_data(raw_noaa)
raw_noaa <- as.data.table(noaa_data)
eq_clean_data(raw_noaa)
class(raw_noaa)
library(data.table)
library(MsdrCapstoneMPS)
noaa_data
class(noaa_data)
raw_noaa <- as.data.table(noaa_data)
eq_clean_data(raw_noaa)
raw_noaa[, DATE := as.Date(paste(YEAR, MONTH, DAY, sep = "-"),
format = "%Y-%m-%d")]
tail(raw_noaa)
raw_noaa[, c("LATITUDE", "LONGITUDE") := lapply(.SD, as.numeric),
.SDcols=c("LATITUDE", "LONGITUDE")]
tail(raw_noaa)
devtools::document()
devtools::use_testthat()
library(MsdrCapstoneMPS)
raw_noaa <- as.data.table(noaa_data)
test_NOAA <- eq_clean_data(raw_noaa)
is.data.table(raw_noaa)
eq_clean_data(raw_noaa)
raw_noaa <- as.data.table(noaa_data)
raw_noaa
class(raw_noaa)
eq_clean_data(raw_noaa)
raw_noaa[, DATE := as.Date(paste(YEAR, MONTH, DAY, sep = "-"),
format = "%Y-%m-%d")]
test_that("Clean data is delivered correctly",{
test_NOAA <- eq_clean_data(raw_noaa)
expect_is(test_NOAA$DATE, "Date")
expect_is(test_NOAA$LATITUDE, "numeric")
expect_is(test_NOAA$LONGITUDE, "numeric")
expect_is(test_NOAA$EQ_PRIMARY, "numeric")
expect_is(test_NOAA$TOTAL_DEATHS, "numeric")
expect_equal(length(grep(":", test_NOAA$LOCATION_NAME)),0)
})
library(MsdrCapstoneMPS)
library(testthat)
test_that("Clean data is delivered correctly",{
test_NOAA <- eq_clean_data(raw_noaa)
expect_is(test_NOAA$DATE, "Date")
expect_is(test_NOAA$LATITUDE, "numeric")
expect_is(test_NOAA$LONGITUDE, "numeric")
expect_is(test_NOAA$EQ_PRIMARY, "numeric")
expect_is(test_NOAA$TOTAL_DEATHS, "numeric")
expect_equal(length(grep(":", test_NOAA$LOCATION_NAME)),0)
})
test_NOAA <- eq_clean_data(raw_noaa)
expect_is(test_NOAA$DATE, "Date")
expect_is(test_NOAA$LATITUDE, "numeric")
library(MsdrCapstoneMPS)
?eq_clean_data
class(noaa_data)
eq_clean_data(noaa_data)
raw_noaa <- as.data.table(noaa_data)
source("/Users/mpd10/Documents/Programming Resources/datasciencecoursera/Capstone/MsdrCapstoneMPS/R/clean_data.R")
raw_noaa <- as.data.table(noaa_data)
eq_clean_data(raw_noaa)
test <- eq_clean_date(raw_noaa)
test <- eq_clean_data(raw_noaa)
library(MsdrCapstoneMPS)
context("Cleaning functions")
raw_noaa <- as.data.table(noaa_data)
test_that("Clean data is delivered correctly",{
test_NOAA <- eq_clean_data(raw_noaa)
expect_is(test_NOAA$DATE, "Date")
expect_is(test_NOAA$LATITUDE, "numeric")
expect_is(test_NOAA$LONGITUDE, "numeric")
})
expect_failure(expect_match(eq_location_clean("USA: san francisco"),
":"))
eq_location_clean("USA: san francisco")
?eq_location_clean
head(raw_noaa)
test_NOAA <- eq_location_clean(raw_noaa)
tail(test_NOAA)
tail(test_NOAA[, LOCATION_NAME])[1]
tail(raw_noaa[, LOCATION_NAME])
test_that("eq_location_clean is stripping out the countries and fixing case",{
test_NOAA <- eq_location_clean(raw_noaa)
expect_equal(tail(test_NOAA[, LOCATION_NAME])[1],
"Morotai")
})
raw_noaa <- as.data.table(noaa_data)
library(MsdrCapstoneMPS)
context("Earthquake timeline")
## Clean data
raw_noaa <- as.data.table(noaa_data)
clean_noaa <- eq_clean_data(raw_noaa)
clean_noaa <- eq_location_clean(clean_noaa)
## Set key to date
setkey(clean_noaa, DATE)
## Pull test set of 5 years
eq_subset <- clean_noaa[DATE >= "2005-01-01" & DATE <= "2010-12-31"]
## Subset to 5 countries
top_countries <- eq_subset[,.N,by = COUNTRY][order(-N)][1:5, COUNTRY]
eq_subset <- eq_subset[COUNTRY %in% top_countries]
## Set country to factor
eq_subset[, COUNTRY := as.factor(COUNTRY)]
## Set earthquake magnitude to numeric
eq_subset[, EQ_PRIMARY := as.numeric(EQ_PRIMARY)]
## Build plot
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31",
aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "")
library(ggplot2)
## Build plot
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31",
aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "")
class(g)
g[1]
class(g[1])
g[1]
g[1]$DATE
plot_data <- g$data
plot_data <- g$data
min(plot_data[, DATE])
expect_lte(min(plot_data[, DATE]), "2005-01-01")
min(plot_data[, DATE])
class(min(plot_data[, DATE]))
expect_lte(min(plot_data[, DATE]), as.Date("2005-01-01"))
as.numeric(min(plot_data[, DATE]))
expect_lte(as.numeric(min(plot_data[, DATE])), as.numeric(as.Date("2005-01-01")))
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE])))
as.numeric(as.Date("2005-01-01"))
as.numeric(min(plot_data[, DATE]))
min(plot_data[, DATE])
max(plot_data[, DATE])
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE]))),
expect_gte(as.numeric(as.Date("2010-12-31")), as.numeric(max(plot_data[, DATE]))),
expect_is(test_NOAA$DATE, "Date")
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE]))),
expect_gte(as.numeric(as.Date("2010-12-31")), as.numeric(max(plot_data[, DATE])))
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE]))),
expect_gte(as.numeric(as.Date("2010-12-31")), as.numeric(max(plot_data[, DATE]))),
expect_equal(g$layers, 1)
g$layers
length(g$layers)
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE]))),
expect_gte(as.numeric(as.Date("2010-12-31")), as.numeric(max(plot_data[, DATE]))),
expect_equal(length(g$layers), 1)
test_that("Timeline plot",{
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "")
plot_data <- g$data
## Data is subsetting correctly
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE]))),
expect_gte(as.numeric(as.Date("2010-12-31")), as.numeric(max(plot_data[, DATE]))),
## Single layer for plot
expect_equal(length(g$layers), 1)
})
test_that("Timeline plot",{
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "")
plot_data <- g$data
## Data is subsetting correctly
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE]))),
expect_gte(as.numeric(as.Date("2010-12-31")), as.numeric(max(plot_data[, DATE]))),
## Single layer for plot
expect_equal(length(g$layers), 1)
})
test_that("Timeline plot",{
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "")
plot_data <- g$data
## Data is subsetting correctly
expect_lte(as.numeric(as.Date("2005-01-01")), as.numeric(min(plot_data[, DATE])))
expect_gte(as.numeric(as.Date("2010-12-31")), as.numeric(max(plot_data[, DATE])))
## Single layer for plot
expect_equal(length(g$layers), 1)
})
g$layer_data
g
g[1]
g[2]
g[3]
g[4]
g[5]
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "") + theme_earthquake()
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "") + theme_earthquake()
library(ggthemes)
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "") + theme_earthquake()
g
g[5]
length(g[5])
length(g[5]$theme)
## Theme is a list of 61 items
expect_equal(length(g[5]$theme), 61)
g <- ggplot(data = eq_subset, aes(x = DATE, y = COUNTRY)) + geom_timeline(xmin = "2005-01-01", xmax = "2010-12-31", aes(color = DEATHS,size = EQ_PRIMARY)) + labs(y = "") + geom_timeline_labels(n_max = 20, aes(label = LOCATION_NAME, magnitude = EQ_PRIMARY))
g
library(grid)
g
g[2]
## Adds a second layer for labels
expect_equal(length(g$layers), 2)
g[2]
g[2]$layers[[2]]
g[2]$layers[[2]]$mapping
g[2]$layers[[2]]$mapping*label
g[2]$layers[[2]]$mapping[[label]]
g[2]$layers[[2]]$mapping
g[2]$layers[[2]]$mapping$label
## Label in second layer is LOCATION_NAME
expect_equal(g[2]$layers[[2]]$mapping$label, "LOCATION_NAME")
g[2]$layers[[2]]$mapping$label
class(g[2]$layers[[2]]$mapping$label)
## Label in second layer is LOCATION_NAME
expect_equal(as.character(g[2]$layers[[2]]$mapping$label), "LOCATION_NAME")
as.character(g[2]$layers[[2]]$mapping$label)
## Label in second layer is LOCATION_NAME
expect_equal(as.character(g[2]$layers[[2]]$mapping$label), "LOCATION_NAME")
## Magnitude is mapped to EQ_PRIMARY
expect_equal(as.character(g[2]$layers[[2]]$mapping$magnitude), "EQ_PRIMARY")
raw_noaa %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
library(leaflet)
raw_noaa %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
g <- raw_noaa %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
class(g)
g$package
package(g)
g[8]
g[2]
g[5]
g[6]
g[7]
g[8]
g[9]
g[10]
g[8]
attr(g)
attributes(g)
attributes(g)$package
## Plot is a leaflet map
expect_equal(attributes(g)$package, "leaflet")
g <- raw_noaa %>%
eq_clean_data() %>%
eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
g
View(g)
head(g[, popup_text])
head(g)
head(g$popup_text)
## html label is built correctly
expect_equal(g$popup_text[1], "<b>Location: </b>San Andres Tuxtla, Tuxtepec<br /> <b>Magnitude:</b> 5.9 <br />")
g$popup_text[1]
## html label is built correctly
expect_equal(g$popup_text[1], "<b>Location: </b>San Andres Tuxtla, Tuxtepec<br /> <b>Magnitude:</b> 5.9 <br />")
